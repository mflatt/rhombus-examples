#lang rhombus

/*
  μKanren: A Minimal Functional Core for Relational Programming
  http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf

  ported to Rhombus (using more native types)
*/

import:
  // Don't forget rhombus/macro or annotations and stuff fail
  rhombus/macro: no_prefix
  racket/base:
    prefix r
    rename:
      #{hash-ref}        ~to hash_ref
      #{pair?}           ~to is_Pair
      #{build-list}      ~to build_list
      #{procedure-arity} ~to procedure_arity
  lib("rhombus/compat/stream.rhm"):
    prefix streamlib
    expose:
      Stream

dot.macro '(goal_dot_provider $left $dot $right):
  match right
  | 'apply: '(fun (state -: State) -: Stream: $left(state))

// Goals are State -> Stream.of(State), we're going to cheat since there isn't
// arrow annotations yet.
annotation.macro 'Goal:
  annotation_ct.pack_predicate('(r.#{procedure?}),
                               '(($(dot_ct.provider_key), goal_dot_provider)))

class Var (i :: Integer)
val is_Var: #{Var?}

annotation.macro 'Subst: '(Map.of(Var, Any))
class State (counter :: Integer, subst :: Subst)

val empty_state :: State: State(0, {})

fun walk(var, subst -: Subst) -: Any:
  val value: r.hash_ref(subst, var, #false)
  cond
  | is_Var(value): walk(value, subst)
  | r.not(value): var
  | ~else: value

fun unify(u, v, subst -: Subst):
  val u1: walk(u, subst)
  val v1: walk(v, subst)
  cond
  | is_Var(u1) && is_Var(v1) && u1 === v1: subst
  | is_Var(u1): subst ++ {u1: v1}
  | is_Var(v1): subst ++ {v1: u1}
  | r.is_Pair(u1) && r.is_Pair(v1):
      val s1: unify(r.car(u1), r.car(v1), subst)
      s1 && unify(r.cdr(u1), r.cdr(v1), s1)
  | ~else:
      u1 === v1 && subst

fun unify_goal(u, v) -: Goal:
  fun (state -: State) -: Stream:
    val subst: unify(u, v, state.subst)
    if subst
    | [State(state.counter, subst)]
    | []

operator (u ≡ v):
  ~stronger_than: ∧ ∨
  ~weaker_than: + - * /
  unify_goal(u, v)

fun call_with_fresh_vars(proc) -: Goal:
  val num_vars :: Integer: r.procedure_arity(proc)
  fun (state -: State) -: Stream:
    fun make_var(i):
      Var(state.counter + i)
    val vars: r.build_list(num_vars, make_var)
    val new_state: State(state.counter + num_vars, state.subst)
    r.apply(proc, vars)(new_state)

expr.rule '(fresh ($u, $v, ...):
              $body ...
              ...):
  '((call_with_fresh_vars(fun ($u, $v, ...):
                            $body ...
                            ...)) -: Goal)

fun mplus(st0 -: Stream, st1 -: Stream) -: Stream:
  cond
  | st0.is_empty: st1
  | ~else:
      streamlib.stream_cons(st0.first, mplus(st1, st0.rest))

fun bind(st -: Stream, goal -: Goal) -: Stream:
  cond
  | st.is_empty: []
  | ~else:
      mplus(goal(st.first), bind(st.rest, goal))

// temporary implementations
fun disj(g0 -: Goal, g1 -: Goal) -: Goal:
  fun (state -: State) -: Stream:
    mplus(g0(state), g1(state))

fun conj(g0 -: Goal, g1 -: Goal) -: Goal:
  fun (state -: State) -: Stream:
    bind(g0(state), g1)

operator ((g0 -: Goal) ∨ (g1 -: Goal)) -: Goal:
  disj(g0, g1)

operator ((g0 -: Goal) ∧ (g1 -: Goal)) -: Goal:
  ~stronger_than: ∨
  conj(g0, g1)

val g:
  fresh (x, y):
    x ≡ symbol(red) ∧ y ≡ symbol(beans)
      ∨ x ≡ symbol(split) ∧ y ≡ symbol(pea)

expr.rule '(zzz($g ...)):
  '(fun (state -: State) -: Stream: streamlib.#{stream*}(($g ...)(state)))

fun fives(x :: Var) -: Goal:
  x ≡ 5 ∨ zzz(fives(x))

fun sixes(x :: Var) -: Goal:
  x ≡ 6 ∨ zzz(sixes(x))

val fives_and_sixes -: Goal:
  fresh (v):
    fives(v) ∨ sixes(v)
